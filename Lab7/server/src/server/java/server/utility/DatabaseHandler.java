package server.utility;

import common.utility.Outputer;
import server.App;

import java.sql.*;

/**
 * A class for handle database.
 */
public class DatabaseHandler {
    // Table names
    public static final String MARINE_TABLE = "space_marine";
    public static final String USER_TABLE = "account";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String CHAPTER_TABLE = "chapter";
    // MARINE_TABLE column names
    public static final String MARINE_TABLE_ID_COLUMN = "id";
    public static final String MARINE_TABLE_NAME_COLUMN = "name";
    public static final String MARINE_TABLE_CREATION_DATE_COLUMN = "creation_date";
    public static final String MARINE_TABLE_HEALTH_COLUMN = "health";
//    public static final String MARINE_TABLE_CATEGORY_COLUMN = "category";
//    public static final String MARINE_TABLE_WEAPON_TYPE_COLUMN = "weapon_type";
    public static final String MARINE_TABLE_LOYAL_COLUMN = "loyal";
    public static final String MARINE_TABLE_HEIGHT_COLUMN = "height";
    public static final String MARINE_TABLE_MELEE_WEAPON_COLUMN = "melee_weapon";
    public static final String MARINE_TABLE_CHAPTER_ID_COLUMN = "chapter_id";
    public static final String MARINE_TABLE_USER_ID_COLUMN = "user_id";
    // USER_TABLE column names
    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    // COORDINATES_TABLE column names
    public static final String COORDINATES_TABLE_ID_COLUMN = "id";
    public static final String COORDINATES_TABLE_SPACE_MARINE_ID_COLUMN = "space_marine_id";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";
    // CHAPTER_TABLE column names
    public static final String CHAPTER_TABLE_ID_COLUMN = "id";
    public static final String CHAPTER_TABLE_NAME_COLUMN = "name";
    public static final String CHAPTER_TABLE_MARINES_COUNT_COLUMN = "marines_count";
    public static final String CHAPTER_TABLE_PARENT_LEGION_COLUMN = "parent_legion";
    public static final String CHAPTER_TABLE_WORLD_COLUMN = "world";

    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseHandler(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    /**
     * A class for connect to database.
     */
    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
//            Class.forName("org.postgresql.Driver");
            connection = DriverManager.getConnection(url, user, password);
//            connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/mydb",
//                    "s336231", "123456");
            Outputer.println("Database connection established.");
            App.logger.info("Database connection established.");
        } catch (SQLException exception) {
            exception.printStackTrace();
            Outputer.printerror("An error occurred while connecting to the database!");
            App.logger.error("An error occurred while connecting to the database!");
        } catch (ClassNotFoundException exception) {
            Outputer.printerror("Database management driver not found!");
            App.logger.error("Database management driver not found!");
        }
    }

    /**
     * @param sqlStatement SQL statement to be prepared.
     * @param generateKeys Is keys needed to be generated.
     * @return Pprepared statement.
     * @throws SQLException When there's exception inside.
     */
    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            //App.logger.info("Подготовлен SQL запрос '" + sqlStatement + "'.");
            return preparedStatement;
        } catch (SQLException exception) {
            //App.logger.error("Произошла ошибка при подготовке SQL запроса '" + sqlStatement + "'.");
            if (connection == null) App.logger.error("Database connection not established!");
            throw new SQLException(exception);
        }
    }

    /**
     * Close prepared statement.
     *
     * @param sqlStatement SQL statement to be closed.
     */
    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
            App.logger.info("Closed SQL query '" + sqlStatement + "'.");
        } catch (SQLException exception) {
            App.logger.error("An error occurred while closing the SQL query '" + sqlStatement + "'.");
        }
    }

    /**
     * Close connection to database.
     */
    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Outputer.println("Database connection lost.");
            App.logger.info("Database connection lost.");
        } catch (SQLException exception) {
            Outputer.printerror("An error occurred while disconnecting the database connection!");
            App.logger.error("An error occurred while disconnecting the database connection!");
        }
    }

    /**
     * Set commit mode of database.
     */
    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            App.logger.error("An error occurred while setting the database transaction mode!");
        }
    }

    /**
     * Set normal mode of database.
     */
    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            App.logger.error("An error occurred while establishing normal database mode!");
        }
    }

    /**
     * Commit database status.
     */
    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            App.logger.error("An error occurred while confirming the new state of the database!");
        }
    }

    /**
     * Roll back database status.
     */
    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            App.logger.error("An error occurred while reverting the original state of the database!");
        }
    }

    /**
     * Set save point of database.
     */
    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            App.logger.error("An error occurred while saving the database state!");
        }
    }
}
